AWSTemplateFormatVersion: '2010-09-09'
Description: Px Container Security Kubernetes Demo Template
Parameters:
  DefaultPassword:
    Description: Default password for trendmicro user.
    Type: String
    NoEcho: true
    Default: "trendmicro"  # Valor por defecto
Resources:
  VPCCSDemo:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPCCSDemo
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPForNAT.AllocationId
      SubnetId: !Ref PublicSubnet
  EIPForNAT:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCCSDemo
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCCSDemo
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CS_Demo_InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCCSDemo
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCSDemo
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCSDemo
  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  KSInfraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Access for Kubernetes Infra
      VpcId: !Ref VPCCSDemo
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6443'
          ToPort: '6443'
          CidrIp: 10.0.2.0/24
      SecurityGroupEgress:
        - IpProtocol: -1 # all
          FromPort: -1 # all
          ToPort: -1 # all
          CidrIp: 0.0.0.0/0
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Give RDP access to bastion host
      VpcId: !Ref VPCCSDemo
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0  # Reemplaza con tu IP si es necesario
      SecurityGroupEgress:
        - IpProtocol: -1 # all
          FromPort: -1 # all
          ToPort: -1 # all
          CidrIp: 0.0.0.0/0
  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Give SSH access to private instances
      VpcId: !Ref VPCCSDemo
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1 # all
          FromPort: -1 # all
          ToPort: -1 # all
          CidrIp: 0.0.0.0/0
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SSMRole
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: KubernetesInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/k3s/cluster/token
  Masterk3sLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.large
        ImageId: ami-04a81a99f5ec58529 # Ubuntu Noble 24.04 - Virginia
        SecurityGroupIds:
          - !Ref KSInfraSecurityGroup
          - !Ref PrivateInstanceSecurityGroup
        IamInstanceProfile:
          Name: !Ref SSMInstanceProfile
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Masterk3sInstance
              - Key: Node-Type
                Value: Master
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp3
              VolumeSize: 15
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            users:
              - name: trendmicro
                sudo: ALL=(ALL) NOPASSWD:ALL
                groups: sudo
                home: /home/trendmicro
                shell: /bin/bash
                passwd: ${DefaultPassword}
            runcmd:
              - |
                #!/bin/bash
                sudo apt update -y && sudo apt upgrade -y
                sudo apt install -y unzip jq
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -o awscliv2.zip
                sudo ./aws/install --update
                aws s3 cp s3://cloudlab-yessenia/initial-script.sh /tmp/initial-script.sh
                chmod +x /tmp/initial-script.sh
                /tmp/initial-script.sh
  Masterk3sInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PrivateSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref Masterk3sLaunchTemplate
        Version: 1
  Nodek3sLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.medium
        ImageId: ami-04a81a99f5ec58529 # Ubuntu Noble 24.04 - Virginia
        SecurityGroupIds:
          - !Ref KSInfraSecurityGroup
          - !Ref PrivateInstanceSecurityGroup
        IamInstanceProfile:
          Name: !Ref SSMInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp3
              VolumeSize: 15
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            users:
              - name: trendmicro
                sudo: ALL=(ALL) NOPASSWD:ALL
                groups: sudo
                home: /home/trendmicro
                shell: /bin/bash
                passwd: ${DefaultPassword}
            runcmd:
              - |
                #!/bin/bash
                aws s3 cp s3://cloudlab-yessenia/initial-script.sh /tmp/initial-script.sh
                chmod +x /tmp/initial-script.sh
                /tmp/initial-script.sh
  Nodek3sAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref Nodek3sLaunchTemplate
        Version: 1
      MinSize: 2
      MaxSize: 5
      DesiredCapacity: 3
      Tags:
        - Key: Name
          Value: Nodek3sInstance
          PropagateAtLaunch: true
  
  BastionHost:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: t2.large
      SubnetId: !Ref PublicSubnet
      ImageId: ami-07cc1bbe145f35b58  # Windows Server 2022 - Virginia
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      UserData:
        Fn::Base64: |
          <powershell>
          # Descargar y ejecutar el script de S3
          if (-not (Get-Module -ListAvailable -Name AWSPowerShell)) {
              Install-Package -Name AWSPowerShell -Source PSGallery -Force -AllowClobber
          }
          $scriptUrl = "https://s3.amazonaws.com/cloudlab-yessenia/win_script.ps1"
          $localPath = "$env:USERPROFILE\Downloads\win_script.ps1"
          Invoke-WebRequest -Uri $scriptUrl -OutFile $localPath
          Start-Process -FilePath "powershell.exe" -ArgumentList "-ExecutionPolicy Bypass -File $localPath" -Wait
          </powershell>